Script started on Mon 16 Oct 2017 03:23:30 PM EDT
tuser@tutor-vserver:~/mp2$ ssh janwesh@users.cs.umb.edu
janwesh@users.cs.umb.edu's password: 
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-96-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

99 packages can be updated.
0 updates are security updates.


You have new mail.
Last login: Mon Oct 16 15:20:11 2017 from 158.121.249.23
janwesh@itserver6:~$ cd cs341/mp2
janwesh@itserver6:~/cs341/mp2$ ls -al
total 236
drwxrwsr-x 3 janwesh cs341-1G   4096 Oct 16 15:23 .
drwxrws--- 5 janwesh cs341-1G   4096 Oct  3 22:53 ..
-rw-r--r-- 1 janwesh cs341-1G    399 Oct 16 15:22 countc.c
-rw-r--r-- 1 janwesh cs341-1G   1643 Oct 16 15:23 countc.opc
-rwxr-xr-x 1 janwesh cs341-1G  26794 Oct 16 15:23 count.lnx
-rw-r--r-- 1 janwesh cs341-1G    143 Oct 16 15:23 count.opc
-rw-r--r-- 1 janwesh cs341-1G    832 Oct 16 15:21 count.s
-rw-r--r-- 1 janwesh cs341-1G   1760 Oct 16 15:23 count.syms
-rw-r--r-- 1 janwesh cs341-1G   2173 Oct 10 22:24 makefile
-rw-r--r-- 1 janwesh cs341-1G 147915 Oct 10 22:24 mp2.pdf
-rw-r--r-- 1 janwesh cs341-1G    395 Oct 10 22:24 printbinc.c
-rw-r--r-- 1 janwesh cs341-1G    616 Oct 10 22:24 strcpyc.c
-rw-r--r-- 1 janwesh cs341-1G    159 Oct 10 22:24 sum10c.c
-rw-r--r-- 1 janwesh cs341-1G    426 Oct 10 22:24 sum10.s
-rw-r--r-- 1 janwesh cs341-1G   4696 Oct 10 22:24 sum10.script_mod.txt
lrwxrwxrwx 1 janwesh cs341-1G     10 Oct 16 15:23 syms -> count.syms
drwxrwsr-x 2 janwesh cs341-1G   4096 Oct  3 23:02 warmup
janwesh@itserver6:~/cs341/mp2$ ssh ulab
janwesh@ulab's password: 
Last login: Mon Oct 16 15:23:07 2017 from itserver6.cs.um
Sun Microsystems Inc.   SunOS 5.8       Generic 64-bit  February 2000

 Welcome to blade57.cs.umb.edu, a SunBlade 100 (uIIe-S128)

                    Authorized users only.

You have new mail.
blade57(1)% cd cs341/mp2
blade57(2)% ls
count.lnx             countc.opc            sum10.s
count.opc             makefile              sum10.script_mod.txt
count.s               mp2.pdf               sum10c.c
count.syms            printbinc.c           syms
countc.c              strcpyc.c             warmup
blade57(3)% make clean
rm -f *.o *.opc *.syms *.lnx core syms
blade57(4)% ls
count.s               printbinc.c           sum10c.c
countc.c              strcpyc.c             warmup
makefile              sum10.s
mp2.pdf               sum10.script_mod.txt
blade57(5)% make A=count
/groups/ulab/bin/i386-as -o count.opc count.s
/groups/ulab/bin/i386-gcc -g -Wall -Wno-implicit -Wshadow -I/groups/ulab/pcdev/include -c -o countc.opc countc.c
/groups/ulab/bin/i386-ld -N -Ttext 1000e0 -o count.lnx \
        /groups/ulab/pcdev/lib/startup0.opc /groups/ulab/pcdev/lib/startup.opc \
        countc.opc count.opc /groups/ulab/pcdev/lib/libc.a
rm -f syms;/groups/ulab/bin/i386-nm -n count.lnx>count.syms;ln -s count.syms syms
blade57(6)% ls
count.lnx             countc.opc            sum10.s
count.opc             makefile              sum10.script_mod.txt
count.s               mp2.pdf               sum10c.c
count.syms            printbinc.c           syms
countc.c              strcpyc.c             warmup
blade57(7)% cat countc.c
/* countc.c: call assembly soubroutine to count c's in string 
   bob wilson
   04/28/2016
   */

extern int count(char *string, char c);

int main(void)
{
  char s[100];
  char c;
  printf("Enter a string of characters:\n");
  scanf("%s", s);
  printf("Enter a character to count:\n");
  scanf("%c", &c);
  printf("\nThe number of %c's in the string %s is %d\n", c, s, count(s, 
c));
  return 0;
}
blade57(8)% cat count.s

# Anwesh Joshi

    .text
    .globl _count

_count:
    pushl %ebp            #create stack 
    movl 8(%esp), %ecx    #accessing first parameter -- string 
    movl 12(%esp), %dl    #accessing second parameter -- character
    movl $0, %eax         #counter
while:
    cmpb $0, (%ecx)      #compare character string with null character
    je done               #if null character jump to done label
    cmpb (%ecx), %dl      #comparing charater from input string to the charater
    jne else              
    addl $1, %eax         #increase counter by 1
    incl %ecx             #go to next string character
    jmp while             #jump back to while

else:
    incl %ecx             #advance to next character string
    jmp while             #go back to while label

done:
    popl %ebp             #pop %ebp register parameters
    ret
    .end



blade57(9)% cat makefie[Kle
# makefile: makefile for assembly-language examples
# 
# Assumes a matched pair of sources, e.g., myprog.s and myprogc.c,
# an assembler source for a function and its C driver.

# Usage: For an assembler source, say myprog.s, with a corresponding 
#  C driver myprogc.c, set A to the basename in the make command line: 
#  "make A=myprog myprog.lnx" or just "make A=myprog"
#  (since $(A).lnx is the first make target)
#  Then myprog.lnx is ready for downloading via "mtip -f myprog.lnx"
#  (followed by ~r and ~d inside the mtip program)

# also "make clean" to clean up non-source files in a directory

# Here the assembler program has the primary source name,
# the C program is just a driver of almost the same basename:
C = $(A)c

# system directories needed for compilers, libraries, header files--
# assumes the environment variables SAPC_TOOLS, SAPC_GNUBIN, and SAPC_SRC
# are set up, usually by the ulab module

PC_LIB = $(SAPC_TOOLS)/lib
PC_INC = $(SAPC_TOOLS)/include

CC   = $(SAPC_GNUBIN)/i386-gcc
CFLAGS = -g -Wall -Wno-implicit -Wshadow -I$(PC_INC)
AS   = $(SAPC_GNUBIN)/i386-as
LD   = $(SAPC_GNUBIN)/i386-ld
NM   = $(SAPC_GNUBIN)/i386-nm

# File suffixes:
# .c    C source (often useful both for UNIX host and SAPC)
# .s    assembly language source
# .opc  relocatable machine code, initialized data, etc., for SA PC
# .lnx  executable image (bits as in memory), for SA PC (Linux a.out format)
# .syms text file of .lnx's symbols and their values (the "symbol table")
# Symbol file "syms"--for most recently built executable in directory

# PC executable--tell ld to start code at 0x1000e0, load special startup
# module, special PC C libraries--
# Code has 0x20 byte header, so use "go 100100" (hopefully easier to
# remember than 100020)

$(A).lnx: $(A).opc $(C).opc 
        $(LD) -N -Ttext 1000e0 -o $(A).lnx \
                $(PC_LIB)/startup0.opc $(PC_LIB)/startup.opc \
                $(C).opc $(A).opc $(PC_LIB)/libc.a
        rm -f syms;$(NM) -n $(A).lnx>$(A).syms;ln -s $(A).syms syms

$(A).opc: $(A).s
        $(AS) -o $(A).opc $(A).s

# tell gcc to use $(PC_INC) for #include <...> headers--
$(C).opc: $(C).c
        $(CC) $(CFLAGS) -c -o $(C).opc $(C).c
        
clean:
        rm -f *.o *.opc *.syms *.lnx core syms
blade57(10)% logout
Connection to ulab closed.
janwesh@itserver6:~/cs341/mp2$ logout
Connection to users.cs.umb.edu closed.
tuser@tutor-vserver:~/mp2$ scp janwesh@users.cs.umb.edu:cs341/mp2/count.* .
janwesh@users.cs.umb.edu's password: 
count.lnx                                       0%    0     0.0KB/s   --:-- ETAcount.lnx                                     100%   26KB  26.2KB/s   00:00    
count.opc                                       0%    0     0.0KB/s   --:-- ETAcount.opc                                     100%  143     0.1KB/s   00:00    
count.s                                         0%    0     0.0KB/s   --:-- ETAcount.s                                       100%  832     0.8KB/s   00:00    
count.syms                                      0%    0     0.0KB/s   --:-- ETAcount.syms                                    100% 1760     1.7KB/s   00:00    
tuser@tutor-vserver:~/mp2$ scp janwesh@users.cs.umb.edu:cs341/mp2/countc.* .
janwesh@users.cs.umb.edu's password: 
countc.c                                        0%    0     0.0KB/s   --:-- ETAcountc.c                                      100%  399     0.4KB/s   00:00    
countc.opc                                      0%    0     0.0KB/s   --:-- ETAcountc.opc                                    100% 1643     1.6KB/s   00:00    
tuser@tutor-vserver:~/mp2$ mtip -f count.lnx
For command help, type ~?
For help on args, rerun without args
Code starts at 0x100100
Using board # 1 
Please type <CR> to confirm console setting: 
Setting console dev to COM2Console: colour EGA+ 80x25
COM1 at 0x03f8 (irq = 4) is a 16550A
COM2 at 0x02f8 (irq = 3) is a 16550A

                 Welcome to UMB Tutor for the PC
   UMB Tutor is a 32-bit protected-mode PC debugger/downloader,
       based on Linux, UMB Tutor for m68k, and remote gdb.
UMB Tutor is free software and you are welcome to distribute copies
of it under certain conditions.  There is no warranty for this program.
The copyright and warranty provisions follow the Gnu general public
license, available for view in gdb and elsewhere.  Full sources available.
--bugs, suggestions, questions to eoneil@cs.umb.edu

Exception 3 at EIP=00057a9b: Breakpoint
Tutor> ~downloading count.lnx

.......Done.

Download done, setting EIP to 100100.
Tutor> gdb
Setting gdb dev to COM1, starting gdb (CTRL-C to abort).
Enter a string of characters:
apple
Enter a character to count:
a
The number of a's in the string apple is 1
Enter a string of characters:
abbaabbaaa
Enter a character to count:
a
The number of a's in the string abbaabbaaa is 6

Tutor> go 100100
Enter a string of characters:
aeroplane
Enter a character to count:
a
The number of a's in the string aeroplane is 2
Exception 3 at EIP=00100110: Breakpoint
Tutor> ~q 
Quit handler: 
killing process 2012 Leaving board #1
tuser@tutor-vserver:~/mp2$ exit
exit

Script done on Mon 16 Oct 2017 03:29:58 PM EDT
