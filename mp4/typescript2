Script started on Mon 27 Nov 2017 09:29:55 PM EST
tuser@tutor-vserver:~/mp4$ ssh janwesh@users.cs.umb.edu
janwesh@users.cs.umb.edu's password: 
Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-96-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

99 packages can be updated.
0 updates are security updates.


You have new mail.
Last login: Mon Nov 27 21:22:39 2017 from 73.219.2.116
janwesh@itserver6:~$ cd cs341/mp4
janwesh@itserver6:~/cs341/mp4$ ls -al
ls: cannot read symbolic link 'syms': Input/output error
total 324
drwxr-sr-x 2 janwesh cs341-1G   4096 Nov 27 21:29 .
drwxrws--- 7 janwesh cs341-1G   4096 Nov 15 22:12 ..
-rw-r--r-- 1 janwesh cs341-1G   3842 Nov 15 22:12 makefile
-rw-r--r-- 1 janwesh cs341-1G 179443 Nov 15 22:12 mp4.pdf
-rw-r--r-- 1 janwesh cs341-1G  14726 Nov 15 22:12 Rubric.docx
lrwxrwxrwx 1 janwesh cs341-1G     13 Nov 27 16:06 syms
-rwxr-xr-x 1 janwesh cs341-1G  24256 Nov 19 23:21 testpack
-rw-r--r-- 1 janwesh cs341-1G   3578 Nov 15 22:12 testpack.c
-rwxr-xr-x 1 janwesh cs341-1G  28573 Nov 27 16:06 testpack.lnx
-rw-r--r-- 1 janwesh cs341-1G   7072 Nov 19 23:21 testpack.o
-rw-r--r-- 1 janwesh cs341-1G   6424 Nov 19 23:22 testpack.opc
-rw-r--r-- 1 janwesh cs341-1G   2571 Nov 27 16:06 testpack.syms
-rw-r--r-- 1 janwesh cs341-1G   4795 Nov 27 16:06 timepack_sapc.c
-rw-r--r-- 1 janwesh cs341-1G   5761 Nov 27 16:06 timepack_sapc.opc
-rw-r--r-- 1 janwesh cs341-1G   1932 Nov 15 22:12 timer.c
-rw-r--r-- 1 janwesh cs341-1G  21189 Nov 16 16:19 typescript1
janwesh@itserver6:~/cs341/mp4$ pwd
/home/janwesh/cs341/mp4
janwesh@itserver6:~/cs341/mp4$ cat *.c

/******************************************************************
*
*   file:        testpack.c
*   author:      Ethan Bolker
*   date:        November, 1990
*
*   Driver to test the timing package.
*
*/

#include <stdio.h>
#include <timepack.h>

PROTOTYPE void delay( int ms );
PROTOTYPE char *return_msg( int rc );

int main(void) {
   int time;
   int startrc, stoprc;
   int secs, ms, precision, is_running;

   inittimer();
   querytimer( &precision, &is_running);
   if (is_running)
     printf("Problem: timer shouldn't be 'running' until starttimer is called\n");
   if (precision ==  T_DONT_KNOW)
     printf("querytimer: precision unknown\n");
   else
     printf("querytimer: precision %d us\n", precision);

   printf("---------------------------------------------------------\n");
   printf("First show that the provided timepack *can* keep time\n");
   printf("---------------------------------------------------------\n");
   for( secs = 1; secs < 4; secs++ ) {
      printf("\nwait about %d seconds (%d us)\n", secs , 1000000*secs);
      startrc = starttimer();
      delay( secs * 1000 /* ms */ );
      stoprc = stoptimer( &time );
      printf("starttimer returned %s\n", return_msg(startrc) );
      printf("timer counted %d us \n", time );
      printf("stoptimer returned %s\n", return_msg(stoprc) );
    }
   printf("\n");
   printf("---------------------------------------------------------\n");
   printf("Now do the harder test: can it measure 10ms? 20ms?\n");
   printf("Answer: only after timepack is made more accurate.\n");
   printf("---------------------------------------------------------\n");
   for( ms = 10; ms < 40; ms+=10 ) {
      printf("\nwait about %d ms (%d us)\n", ms , 1000*ms);
      startrc = starttimer();
      delay( ms );
      stoprc = stoptimer( &time );
      printf("starttimer returned %s\n", return_msg(startrc) );
      printf("timer counted %d us \n", time );
      printf("stoptimer returned %s\n", return_msg(stoprc) );
    }

   printf("\nstop stopped clock\n");
   printf("stoptimer returned %s\n", return_msg(stoptimer(&time)) );

 
   shutdowntimer();		/* undo init of timer */
   return 0;
}

/*************************************************************************
*
*  delay - without using timer, just CPU, approximate times.
*   Uses library call to make most of the execution time in the library code
*   so that it shouldn't make too much difference if *this* code is
*   is compiled with optimization flags such as -O or -O2.  Optimization
*   can affect times by a significant amount, maybe 50%.  (But note that
*   the library use disqualifies this as any kind of "benchmark".)
*/
#ifdef SAPC
/* for 400Mhz Pentium 
#define NLOOPS_PER_MSEC 3500 */
/* for higher speed SAPC VMs */
#define NLOOPS_PER_MSEC 5400
#else
/* for u13 (Sun Ultra5_10 Sparc) */
#define NLOOPS_PER_MSEC 3800
#endif

void delay( int ms ){
  char string1[] = "abcdefghij01234567890";
  char string2[sizeof(string1)];
  int i;

  for( i = NLOOPS_PER_MSEC*ms; i--; )
    strcpy(string2,string1);
  return;
}


/*************************************************************************
*
*  convert numerical return codes to strings to print
*
*/
char *return_msg( int rc ) {

    switch (rc) {
      case T_OK:        return("T_OK");
      case T_RUNNING:   return("T_RUNNING");
      case T_STOPPED:   return("T_STOPPED");
      case T_DONT_KNOW: return("T_DONT_KNOW");
      default:          return("");
    }
}


/******************************************************************
*
*   file:      timepack_sapc.c
*   author:    Betty O'Neil
*   date:      '88 (MECB)
*
*   revisions: Ethan Bolker, October 1990 to #include header file timepack.h
*              Betty O'Neil, March 1992 to add inittimer
*              Betty O'Neil, S96 to SAPC
*              Bob Wilson, spring 2014
*
*   SAPC timing package.
*   Link with code containing calls to stoptimer, starttimer
*
*   To do:
*      Implement static flag set when timer is running
*        (for now everything returns T_OK)
*/

/* constants and prototypes for timing package primitives */
#include <stdio.h>
#include <timepack.h>
#include <timer.h>
#include <pic.h>
#include <cpu.h>

typedef enum { FALSE, TRUE } Boolean;

/* PC's 8254 timer: one tick consists of 64K counts at 1193182 counts/sec */
#define COUNTS_PER_SEC 1193182 
#define COUNTS_PER_TICK (64*1024)
/* This is a double constant--see K&R, p. 37.  Doubles are great for
 conversion constants.  Just convert back to int at end if apprpriate */
#define USECS_PER_TICK (1000000.0*COUNTS_PER_TICK/COUNTS_PER_SEC)
/* precision = time between possible values, in us */
#define TIMER_PRECISION 1

extern const IntHandler irq0inthand;

static int tickcount;
static int startcount;
static int timer_running;
static int startdown;
static int nowdown;
void set_timer_count(int count);
void irq0inthandc(void);
void smalldelay(void);

/* set timer ticking.  This is called only once at start of program */
void inittimer()
{
  tickcount = 0;
#ifdef DEBUG
  printf("Disabling interrupts in CPU while setting them up\n");
#endif
  cli();
#ifdef DEBUG  
  printf("Setting interrupt gate for timer, irq 0\n");
#endif
  /* irq 0 maps to slot n = 0x20 in IDT for linux setup */
  set_intr_gate(TIMER0_IRQ+IRQ_TO_INT_N_SHIFT, &irq0inthand);
#ifdef DEBUG
  printf("Commanding PIC to interrupt CPU for irq 0\n");
#endif
  pic_enable_irq(TIMER0_IRQ);
  timer_running = 0;		/* starts running at call to starttimer */
#ifdef DEBUG
  printf("Commanding timer to generate a pulse train using max count\n");
#endif
  set_timer_count(0);	
#ifdef DEBUG
  printf("Enabling interrupts in CPU\n");
#endif
  sti();
}

/* This is NEEDED: future ints could find bogus int handler after this
 * code is overwritten by next download or whatever, requiring reboot.
 * This is called once at end of program.
 */
void shutdowntimer()
{
  cli();
#ifdef DEBUG
  printf("Commanding PIC to shut off irq 0 to CPU\n");
#endif
  pic_disable_irq(TIMER0_IRQ);	/* disallow irq 0 ints to get to CPU */
  sti();
}

/*  for the SAPC case:  microsecond precision (though not microsecond
 *  *accuracy* because of various overhead times involved)
*/
void querytimer(int *precision, int *running)
{
   *precision = TIMER_PRECISION;
   *running = timer_running;
   return;
}

/* start a timed experiment: improve this along with stoptimer */
int starttimer()
{
  outpt(TIMER_CNTRL_PORT, TIMER0 | TIMER_LATCH);
  nowdown = inpt(TIMER0_COUNT_PORT);
  nowdown |= (inpt(TIMER0_COUNT_PORT)<<8);
  startcount = tickcount;
  startdown = nowdown;
  timer_running = TRUE;
  return T_OK;
}

/* temporary crude way: better to read the counter and add in the downcounts
 * (converted to us) since the last tick, and similarly change starttime 
 * to record the starting downcount, and adjust for another partial tick.
 * Remember that printf takes a *lot* of time!!  Don't do it during experiments.
 */
int stoptimer( int *interval )
{
   outpt(TIMER_CNTRL_PORT, TIMER0 | TIMER_LATCH);
   nowdown = inpt(TIMER0_COUNT_PORT);
   nowdown |= (inpt(TIMER0_COUNT_PORT)<<8);
 // *interval = (tickcount - startcount)*USECS_PER_TICK;
   *interval = (int)(((double)(tickcount - startcount)*COUNTS_PER_TICK+(startdown-nowdown))*((double) USECS_PER_TICK/COUNTS_PER_TICK));
#ifdef DEBUG
  printf("stoptimer reached, returning inaccurate time until fixed\n");
#endif
  timer_running = FALSE;
  return T_OK;
}

/* about 10 us on a SAPC (400Mhz Pentium) */
void smalldelay(void)
{
  int i;
  
  for (i=0;i<1000;i++)
    ;
}

/* Set up timer to count down from given count, then send a tick interrupt, */
/* over and over. A count of 0 sets max count, 65536 = 2**16 */
void set_timer_count(int count)
{
  outpt(TIMER_CNTRL_PORT, TIMER0|TIMER_SET_ALL|TIMER_MODE_RATEGEN);
  outpt(TIMER0_COUNT_PORT,count&0xff); /* set LSB here */
  outpt(TIMER0_COUNT_PORT,count>>8); /* and MSB here */
  smalldelay();			/* give the timer a moment to init. */
}

/* timer interrupt handler */
void irq0inthandc(void)
{
  pic_end_int();		/* notify PIC that its part is done */
  tickcount++;			/* count the tick in global var */
}
/* timer.c  Test program to see timer running 
 * Build with $pcex/makefile: "make C=timer timer.lnx"  
 *
 * rename the delay function to smalldelay1() to avoid
 * the same function name in timepack_sapc.c if we
 * use the modified makefile --- R. Cheung 4/2015 */

/* the makefile uses gcc -I<dir> to make sure these come from $pcinc-- */
#include <stdio.h>
#include <timer.h>
#include <cpu.h>

#define NTIMES 5
#define MAX 80
void smalldelay1(void);
void showcounts(void);
void setcount(int count);

int main(void)
{
  int count;
  char buf[MAX];

  printf("Enter count for timer (decimal no. <64K): ");
  fgets(buf,MAX,CONSOLE);	/* dev no. CONSOLE def'd in $pcinc/stdio.h */
  sscanf(buf, "%d" ,&count);
  setcount(count);		/* 0 = max, 65536 */
  showcounts();
  showcounts();
  showcounts();
  return 0;
}
/* about 10 usecs on a SAPC (400Mhz Pentium) */
void smalldelay1(void)
{
  int i;
  
  for (i=0;i<1000;i++)
    ;
}

/* Print out timer counts after little delays, to show downcounting.
 * Note we are assuming the calling overhead to outpt and inpt provide 
 * sufficient delay between the accesses to the same port */
void showcounts()
{
  int i, count[NTIMES];

  for (i=0;i<NTIMES;i++) {
    /* command timer 0 to latch count: */
    outpt(TIMER_CNTRL_PORT, TIMER0|TIMER_LATCH);
    count[i] = inpt(TIMER0_COUNT_PORT);	/* read in LSB of count */
    count[i] |= inpt(TIMER0_COUNT_PORT)<<8; /* then MSB of count */
    smalldelay1();
  }
  for (i=0;i<NTIMES;i++) {	/* this takes more time than "delay" */
    printf("%d ",count[i]);
  }
  printf("\n");
}

/* set count to downcount from, in timer: it gets to 0, starts over */
void setcount(int count)
{
  /* set timer 0 count, mode */
  outpt(TIMER_CNTRL_PORT, TIMER0|TIMER_SET_ALL|TIMER_MODE_RATEGEN);
  outpt(TIMER0_COUNT_PORT,count&0xff); /* set LSB here */
  outpt(TIMER0_COUNT_PORT,count>>8); /* and MSB here */
  smalldelay1();			/* let timer have a moment */
}
janwesh@itserver6:~/cs341/mp4$ cat makefile
# makefile for mp3's testpack
# $pcex/makefile with one additional include dir, and timepack_sapc.c
# compiled and loaded.  Also UNIX build for testpack.
# Usage: 
#  for SAPC: make C=testpack   
#  for UNIX: make testpack
#
# makefile for building C or assembly language programs for the
# Standalone 486 or Pentium IBM PC running in 32-bit protected mode, 
# or "SA PC" for short.
# Single-source-file makefile--needs editing for multiple-module programs

# For a C source, say myprog.c, override the "C=ctest" below by
#  setting C in the make command line: "make C=myprog myprog.lnx"
#  or just "make C=myprog", since $(C).lnx is the first make target.
#  Then myprog.lnx is ready for downloading via "mtip -f myprog.lnx"
#  (followed by ~r and ~d inside the mtip program)
C = ctest



# also "make clean" to clean up non-source files in a directory

# system directories needed for compilers, libraries, header files--
# assumes the environment variables SAPC_TOOLS, SAPC_GNUBIN, and SAPC_SRC
# are set up, usually by the ulab module
PC_LIB = $(SAPC_TOOLS)/lib
PC_INC = $(SAPC_TOOLS)/include
TIMING = $(SAPC_TOOLS)/timing

PC_CC   = $(SAPC_GNUBIN)/i386-gcc
# development build: -g provides debugging support, slows down execution
# Use -O2 optimization, no -g on final timing runs!
PC_CFLAGS_DEV = -g  -Wall -Wno-implicit -Wshadow -I$(PC_INC) -I$(TIMING)
PC_CFLAGS_OPT = -O2 -Wall -Wno-implicit -Wshadow -I$(PC_INC) -I$(TIMING)
# make default PC_CFLAGS be PC_CFLAGS_DEV
O = DEV
# allow user to override DEV via O=OPT on the command line
PC_CFLAGS = $(PC_CFLAGS_$(O)) 

PC_AS   = $(SAPC_GNUBIN)/i386-as
PC_LD   = $(SAPC_GNUBIN)/i386-ld
PC_NM   = $(SAPC_GNUBIN)/i386-nm

# File suffixes:
# .c	C source (often useful both for UNIX host and SAPC)
# .s 	assembly language source
# .opc  relocatable machine code, initialized data, etc., for SA PC
# .lnx  executable image (bits as in memory), for SA PC (Linux a.out format)
# .syms text file of .lnx's symbols and their values (the "symbol table")
# Symbol file "syms"--for most recently built executable in directory

# PC executable--tell ld to start code at 0x1000e0, load special startup
# module, special PC C libraries--
# Code has 0x20 byte header, so use "go 100100" (hopefully easier to
# remember than 100020)
# This executable also contains  timepack_sapc.opc
$(C).lnx: $(C).opc timepack_sapc.opc $(PC_LIB)/libc.a \
			$(PC_LIB)/startup.opc $(PC_LIB)/startup0.opc
	$(PC_LD) -N -Ttext 1000e0 -o $(C).lnx \
		$(PC_LIB)/startup0.opc $(PC_LIB)/startup.opc \
		$(C).opc timepack_sapc.opc $(PC_LIB)/libc.a
	rm -f syms;$(PC_NM) -n $(C).lnx>$(C).syms;ln -s $(C).syms syms

# tell gcc to use $(PC_INC) for #include <...> headers--
$(C).opc: $(C).c
	$(PC_CC) $(PC_CFLAGS) -I$(PC_INC) -I$(TIMING) -c -o $(C).opc $(C).c

timepack_sapc.opc: timepack_sapc.c
	$(PC_CC) $(PC_CFLAGS) -I$(PC_INC) -I$(TIMING) -c \
			-o timepack_sapc.opc timepack_sapc.c

$(A).opc: $(A).s
	$(PC_AS) -o $(A).opc $(A).s

# UNIX version--set include dir via CFLAGS, for makefile's built-in rules
# for C compilation
# The suffixes are used to choose between timepack_unix_opt.o and 
# timepack_unix_dbg.o in the TIMING directory
CFLAGS_DEV = -g -Wall -Wno-implicit -Wshadow -I$(TIMING)
SUFFIX_DEV = _dbg
CFLAGS_OPT = -O2 -Wall -Wno-implicit -Wshadow -I$(TIMING)
SUFFIX_OPT = _opt
# change to following to CFLAGS_OPT and SUFFIX_OPT for optimized versions
# also "make clean" when switching over
CFLAGS = $(CFLAGS_DEV)
SUFFIX = $(SUFFIX_DEV)

testpack: testpack.o $(TIMING)/timepack_unix$(SUFFIX).o 
	gcc -o testpack testpack.o $(TIMING)/timepack_unix$(SUFFIX).o

itimes: itimes.o $(TIMING)/timepack_unix$(SUFFIX).o 
	gcc -o itimes itimes.o $(TIMING)/timepack_unix$(SUFFIX).o 

clean:
	rm -f *.o *.opc *.syms *.lnx core syms
janwesh@itserver6:~/cs341/mp4$ ssh ulab
janwesh@ulab's password: 
Last login: Mon Nov 27 16:06:32 2017 from itserver6.cs.um
Sun Microsystems Inc.   SunOS 5.8       Generic 64-bit  February 2000

 Welcome to blade57.cs.umb.edu, a SunBlade 100 (uIIe-S128)

                    Authorized users only.

You have new mail.
blade57(1)% cd cs341/mp4
blade57(2)% make clean
rm -f *.o *.opc *.syms *.lnx core syms
blade57(3)% a[Kmake C=testpack
/groups/ulab/bin/i386-gcc -g  -Wall -Wno-implicit -Wshadow -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/timing  -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/timing -c -o testpack.opc testpack.c
/groups/ulab/bin/i386-gcc -g  -Wall -Wno-implicit -Wshadow -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/timing  -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/timing -c \
                -o timepack_sapc.opc timepack_sapc.c
/groups/ulab/bin/i386-ld -N -Ttext 1000e0 -o testpack.lnx \
        /groups/ulab/pcdev/lib/startup0.opc /groups/ulab/pcdev/lib/startup.opc \
        testpack.opc timepack_sapc.opc /groups/ulab/pcdev/lib/libc.a
rm -f syms;/groups/ulab/bin/i386-nm -n testpack.lnx>testpack.syms;ln -s testpack.syms syms
blade57(4)% ls
Rubric.docx        testpack           testpack.syms      typescript1
makefile           testpack.c         timepack_sapc.c
mp4.pdf            testpack.lnx       timepack_sapc.opc
syms               testpack.opc       timer.c
blade57(5)% logout
Connection to ulab closed.
janwesh@itserver6:~/cs341/mp4$ logout
Connection to users.cs.umb.edu closed.
tuser@tutor-vserver:~/mp4$ scp -r janwesh@users.cs.umb.edu:cs341/mp4/testpack.*  .
janwesh@users.cs.umb.edu's password: 
testpack.c                                      0%    0     0.0KB/s   --:-- ETAtestpack.c                                    100% 3578     3.5KB/s   00:00    
testpack.lnx                                    0%    0     0.0KB/s   --:-- ETAtestpack.lnx                                  100%   28KB  27.9KB/s   00:00    
testpack.opc                                    0%    0     0.0KB/s   --:-- ETAtestpack.opc                                  100% 6424     6.3KB/s   00:00    
testpack.syms                                   0%    0     0.0KB/s   --:-- ETAtestpack.syms                                 100% 2571     2.5KB/s   00:01    
tuser@tutor-vserver:~/mp4$ ls
testpack.c    testpack.o    testpack.syms  typescript2
[0m[01;32mtestpack.lnx[0m  testpack.opc  typescript1
tuser@tutor-vserver:~/mp4$ mtip -f testpack.lnx
For command help, type ~?
For help on args, rerun without args
Code starts at 0x100100
Using board # 1 
Please type <CR> to confirm console setting: 
Setting console dev to COM2Console: colour EGA+ 80x25
COM1 at 0x03f8 (irq = 4) is a 16550A
COM2 at 0x02f8 (irq = 3) is a 16550A

                 Welcome to UMB Tutor for the PC
   UMB Tutor is a 32-bit protected-mode PC debugger/downloader,
       based on Linux, UMB Tutor for m68k, and remote gdb.
UMB Tutor is free software and you are welcome to distribute copies
of it under certain conditions.  There is no warranty for this program.
The copyright and warranty provisions follow the Gnu general public
license, available for view in gdb and elsewhere.  Full sources available.
--bugs, suggestions, questions to eoneil@cs.umb.edu

Exception 3 at EIP=00057a9b: Breakpoint
Tutor> ~downloading testpack.lnx

.......Done.

Download done, setting EIP to 100100.
Tutor> go 100100
querytimer: precision 1 us
---------------------------------------------------------
First show that the provided timepack *can* keep time
---------------------------------------------------------

wait about 1 seconds (1000000 us)
starttimer returned T_OK
timer counted 208932 us 
stoptimer returned T_OK

wait about 2 seconds (2000000 us)
starttimer returned T_OK
timer counted 362103 us 
stoptimer returned T_OK

wait about 3 seconds (3000000 us)
starttimer returned T_OK
timer counted 539686 us 
stoptimer returned T_OK

---------------------------------------------------------
Now do the harder test: can it measure 10ms? 20ms?
Answer: only after timepack is made more accurate.
---------------------------------------------------------

wait about 10 ms (10000 us)
starttimer returned T_OK
timer counted 1375 us 
stoptimer returned T_OK

wait about 20 ms (20000 us)
starttimer returned T_OK
timer counted 2661 us 
stoptimer returned T_OK

wait about 30 ms (30000 us)
starttimer returned T_OK
timer counted 4189 us 
stoptimer returned T_OK

stop stopped clock
stoptimer returned T_OK
Exception 3 at EIP=00100110: Breakpoint
Tutor> ~q 
Quit handler: 
killing process 1802 Leaving board #1
tuser@tutor-vserver:~/mp4$ exit
exit

Script done on Mon 27 Nov 2017 09:32:33 PM EST
